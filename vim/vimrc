filetype off
runtime macros/matchit.vim

function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction

if has('nvim')
  let g:plugin_path='~/.config/nvim/plugged'
else
  set nocompatible
  let g:plugin_path='~/.vim/plugged'
endif

call plug#begin(g:plugin_path)
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-vinegar'

" GIT
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-rhubarb'

" Editing
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'
Plug 'machakann/vim-highlightedyank'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" Handy keybindings
Plug 'tpope/vim-unimpaired'

Plug 'junegunn/vim-slash'
Plug 'mhinz/vim-grepper'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Completion
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Async jobs
" Plug 'w0rp/ale'
Plug 'janko-m/vim-test'
Plug 'kassio/neoterm'

" Movement
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'

" Language support
Plug 'elixir-lang/vim-elixir',  { 'for': ['elixir', 'eelixir'] }
Plug 'slashmili/alchemist.vim', { 'for': ['elixir', 'eelixir'] }
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-markdown',      { 'for': 'markdown' }
" Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
Plug 'kchmck/vim-coffee-script'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-dadbod'
Plug 'christoomey/vim-rfactory'
Plug 'ElmCast/elm-vim', { 'for': 'elm' }

" Aesthetics
Plug 'nanotech/jellybeans.vim'
Plug 'dracula/vim'
Plug 'junegunn/seoul256.vim'
Plug 'itchyny/lightline.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'Yggdroot/indentLine'
call plug#end()

syntax on
filetype plugin indent on

set guioptions=
set laststatus=2

set mouse=a

set hidden
set nocursorline
set number

set shiftround
set whichwrap+=<,>,h,l

set expandtab
set smarttab
set tabstop=2
set shiftwidth=2

set autoread
set noswapfile
set nowritebackup
set nrformats-=octal

set nohlsearch
set incsearch
set ignorecase
set smartcase
set infercase

set noerrorbells
set visualbell

set tm=500
set ttimeoutlen=50

set scrolloff=20
set sidescrolloff=20
set splitright

set tags+=./.tags

set listchars=tab:»\ ,extends:›
set showbreak=›››
set list

set wildmenu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*~,*.pyc,*.so,*.swp,tmp/
set wildignore+=*.pdf,*.jpg,*.dmg,*.zip,*.png,*.gif,*DS_Store*

set complete+=kspell
set completeopt=menu,menuone

set showcmd

set diffopt=vertical

set switchbuf=useopen

set tags^=./.git/tags

set background=dark
colorscheme jellybeans
let g:lightline = { 'colorscheme': 'jellybeans' }

" Keybinds
let mapleader="\<Space>"

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

map Y y$
nnoremap Q <NOP>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)

" Buffers
nnoremap <leader>bb :Buffers<cr>
nnoremap <leader>bd :bd!<cr>
nnoremap <leader>bl :BLines<cr>

" Lines
nnoremap <leader>ll :Lines<cr>
nnoremap <leader>lb :BLines<cr>

" Commands
nnoremap <leader>cc :Commands<cr>
nnoremap <leader>ch :History:<cr>

" Git
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gm :GFiles?<cr>

" Help
nnoremap <leader>hh :Helptags<cr>

" Projects
nnoremap <leader>pf :GFiles<cr>

" Windows
nnoremap <leader>ww :Windows<cr>

" Files
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fh :History<cr>
nnoremap <leader>fs :update<cr>
nnoremap <leader>fr :call RenameCurrentFile()<cr>
nnoremap <leader>fr :call RenameCurrentFile()<cr>

" Search
nnoremap <leader>/  :Ripgrep<space>
nnoremap <leader>*  :Ripgrep <C-R><C-W>

" Tests
nnoremap <leader>tt :TestNearest<cr>
nnoremap <leader>tf :TestFile<cr>
nnoremap <leader>ta :TestSuite<cr>
nnoremap <leader>tl :TestLast<cr>
nnoremap <leader>tg :TestVisit<cr>

nnoremap <leader>xw :StripWhitespace<cr>

" Plugin Config

let g:elm_setup_keybindings = 0

" Language Server
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


let test#strategy = 'neoterm'

let g:neoterm_default_mod = 'botright'
let g:neoterm_autoscroll = 1

let g:ale_lint_on_text_changed = 'never'
let g:ale_set_highlights = 0
let g:ale_linters = {
\   'javascript': ['standard', 'flow'],
\   'elixir': ['elixir-ls']
\}

let g:ale_fixers = {
\   'elixir': ['mix_format']
\}
let g:ale_javascript_standard_executable = 'standard --parser babel-eslint'
let g:ale_elixir_elixir_ls_release = '/Users/conor/Documents/github/elixir-ls/rel'
let g:ale_elixir_elixir_ls_config = {
\   'elixirLS': {
\     'dialyzerEnabled': v:false,
\   },
\}

let g:jsx_ext_required = 0

let g:javascript_plugin_flow = 1

" center search matches
noremap <plug>(slash-after) zz

highlight ExtraWhitespace ctermbg=red

if has('nvim')
  set inccommand=nosplit
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>

  if executable('nvr')
    let $VISUAL = "nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
  endif
endif

augroup FileTypeSpecific
  autocmd!
  autocmd FileType gitcommit setlocal spell
  autocmd Filetype help nnoremap <buffer> q :close<CR>
  autocmd BufNewFile,BufRead *.js.flow setlocal ft=javascript
augroup END

" Commands
command! -bang -nargs=* Ripgrep
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bar Reload exec 'source ~/dotfiles/vim/vimrc'
