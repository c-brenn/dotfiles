filetype off
runtime macros/matchit.vim

if has('nvim')
  let g:plugin_path='~/.config/nvim/plugged'
else
  set nocompatible
  let g:plugin_path='~/.vim/plugged'
endif

call plug#begin(g:plugin_path)
" Shrine to Tpope
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" Shrine to Junegun
Plug 'junegunn/vim-pseudocl' | Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-easy-align'

" Git Gutter
Plug 'airblade/vim-gitgutter'

" Linting/Testing
Plug 'benekastah/neomake'
" Nicer Quickfix
Plug 'romainl/vim-qf'

" Auto-completion
Plug 'jiangmiao/auto-pairs'
Plug 'SirVer/ultisnips'

" Searching
Plug 'unblevable/quick-scope'

" Navigation
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install'  } | Plug 'junegunn/fzf.vim'


" Daily languages
Plug 'vim-ruby/vim-ruby',        { 'for': ['ruby', 'eruby'] }
Plug 'tpope/vim-rails',          { 'for': ['ruby', 'eruby'] }
Plug 'elixir-lang/vim-elixir',   { 'for': ['elixir', 'eelixir'] }
Plug 'slashmili/alchemist.vim/'
Plug 'powerman/vim-plugin-AnsiEsc' " alchemist uses this for pretty docs

" on-the-side languages
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'tpope/vim-markdown'
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

" Colors
Plug 'w0ng/vim-hybrid'

" Dev
Plug 'kassio/neoterm'
call plug#end()

if filereadable(glob("~/dotfiles/vim/helpers.vim"))
  source ~/dotfiles/vim/helpers.vim
endif

syntax on
filetype plugin indent on

let mapleader="\<Space>"
let config_files = [
  \ "general.vim",
  \ "keybinds.vim",
  \ "colours.vim",
  \ "plugin_config.vim",
  \ "leader.vim",
  \ "statusline.vim",
  \ "neo.vim"
  \]
for config_file in config_files
  call Load(ConfigFilePath(config_file))
endfor

