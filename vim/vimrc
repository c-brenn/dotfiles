filetype off
runtime macros/matchit.vim

if has('nvim')
  let g:plugin_path='~/.config/nvim/plugged'
else
  set nocompatible
  let g:plugin_path='~/.vim/plugged'
endif

call plug#begin(g:plugin_path)
Plug 'tpope/vim-fugitive'
Plug 'benekastah/neomake'
Plug 'ajh17/VimCompletesMe'
Plug 'SirVer/ultisnips'
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-unimpaired'

Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install'  } | Plug 'junegunn/fzf.vim'


Plug 'vim-ruby/vim-ruby',       { 'for': 'ruby' }
Plug 'tpope/vim-rails',         { 'for': 'ruby' }
Plug 'elixir-lang/vim-elixir'
if has('nvim')
  Plug 'awetzel/elixir.nvim',     { 'for': 'elixir', 'do': './install.sh' }
endif

Plug 'IanConnolly/gruvbox'
Plug 'junegunn/vim-emoji'
call plug#end()

if filereadable(glob("~/dotfiles/vim/helpers.vim"))
  source ~/dotfiles/vim/helpers.vim
endif

let mapleader=" "
let config_files = [
  \ "general.vim",
  \ "colours.vim",
  \ "statusline.vim",
  \ "leader.vim"
  \]
for config_file in config_files
  call Load(ConfigFilePath(config_file))
endfor


filetype plugin indent on
syntax on


set hidden
set nocursorline
set relativenumber

set shiftround
set whichwrap+=<,>,h,l

set expandtab
set smarttab
set tabstop=2
set shiftwidth=2

set autoread
set noswapfile
set nowritebackup
set nrformats-=octal

set nohlsearch
set incsearch
set ignorecase
set smartcase

set noerrorbells
set visualbell

set tm=500
set ttimeoutlen=50

set splitright
set splitbelow

set scrolloff=10
set sidescrolloff=10

set tags+=./.tags

set listchars=tab:»\ ,extends:›,trail:⋅ " textmate
set fillchars=stlnc:\-,vert:\|
set showbreak=›››
set list

set wildmenu
set wildmode=list:full,full
set wildignore=*.o,*.obj,*~,*.pyc,*.so,*.swp,tmp/
set wildignore+=*.pdf,*.jpg,*.dmg,*.zip,*.png,*.gif,*DS_Store*

set complete+=kspell
set completeopt=menu,menuone

set switchbuf=useopen

set showmode

" Plugin Config

let ruby_operators    = 1
let ruby_no_expensive = 1


let g:elixir_autobuild = 0

let g:fzf_command_prefix = 'Fzf'


" Snippets and Completion
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Only use my snippets and keep them in version control
set rtp+=~/dotfiles/vim
let g:UltiSnipsSnippetsDir='~/dotfiles/vim/vim-snippets'
let g:UltiSnipsSnippetDirectories=['UltiSnips', 'vim-snippets']
let g:vcm_default_maps = 0
" Save VCM bindings
imap <S-Tab> <Plug>vim_completes_me_backward
imap <Tab> <Plug>vim_completes_me_forward

