filetype off
runtime macros/matchit.vim

if has('nvim')
  let g:plugin_path='~/.config/nvim/plugged'
else
  set nocompatible
  let g:plugin_path='~/.vim/plugged'
endif

call plug#begin(g:plugin_path)
Plug 'tpope/vim-eunuch'

" GIT
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Editing
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'

" Handy keybindings
Plug 'tpope/vim-unimpaired'

Plug 'junegunn/vim-slash'

" Completion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Async jobs
Plug 'w0rp/ale'

" Movement
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'

" Language support
Plug 'elixir-lang/vim-elixir',  { 'for': ['elixir', 'eelixir'] }
Plug 'slashmili/alchemist.vim', { 'for': ['elixir', 'eelixir'] }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'tpope/vim-markdown',      { 'for': 'markdown' }

" Aesthetics
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ntpeters/vim-better-whitespace'
call plug#end()

syntax on
filetype plugin indent on

set hidden
set nocursorline
set number

set shiftround
set whichwrap+=<,>,h,l

set expandtab
set smarttab
set tabstop=2
set shiftwidth=2

set autoread
set noswapfile
set nowritebackup
set nrformats-=octal

set nohlsearch
set incsearch
set ignorecase
set smartcase
set infercase

set noerrorbells
set visualbell

set tm=500
set ttimeoutlen=50

set scrolloff=20
set sidescrolloff=20

set tags+=./.tags

set listchars=tab:»\ ,extends:›
set showbreak=›››
set list

set wildmenu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*~,*.pyc,*.so,*.swp,tmp/
set wildignore+=*.pdf,*.jpg,*.dmg,*.zip,*.png,*.gif,*DS_Store*

set complete+=kspell
set completeopt=menu,menuone

set showcmd

set diffopt=vertical

set switchbuf=useopen

set background=dark
colorscheme solarized

" Keybinds
let mapleader="\<Space>"

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

map Y y$
nnoremap Q <NOP>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

let g:fzf_command_prefix = 'Fzf'

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)

" Buffers
nnoremap <leader>bb :FzfBuffers<cr>
nnoremap <leader>bd :bd!<cr>

" Commands
nnoremap <leader>cc :FzfCommands<cr>

" Git
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gm :FzfGFiles?<cr>

" Help
nnoremap <leader>hh :FzfHelptags<cr>

" Files
nnoremap <leader>ff :FzfFiles<cr>
nnoremap <leader>fs :update<cr>
nnoremap <leader>fr :call RenameCurrentFile()<cr>
nnoremap <leader>fr :call RenameCurrentFile()<cr>

" Search
nnoremap <leader>ss :FzfLines<cr>
nnoremap <leader>sb :FzfBLines<cr>

nnoremap <leader>xw :StripWhitespace<cr>

" Plugin Config
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified_removed = '~'

highlight ExtraWhitespace ctermbg=red

if has('nvim')
  set inccommand=nosplit
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>

  if executable('nvr')
    let $VISUAL = "nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
  endif
endif

augroup FileTypeSpecific
  autocmd!
  autocmd FileType gitcommit setlocal spell
augroup END

" Commands
command! -bar Reload exec 'source ~/dotfiles/vim/vimrc'
